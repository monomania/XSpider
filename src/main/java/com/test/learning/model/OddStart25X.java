package com.test.learning.model;

/**
 * 初盘-0.25盘口.
 *
 * 查询结果条数: 12681
 *
 * 拟合算法结果: 概率>=0.2
 * Model=odd-chu(-0.25), 随机场次=3170.00, 筛选比例=100%, 胜率=50%，走率=0%，败率=49% 盈利=-90.11, 盈利率=-2%
 * Model=odd-chu(-0.25), 筛选场次=907.25, 筛选比例=28%，胜率=62%，走率=0%，败率=37%，盈利=26.07, 盈利率=2%
 *
 *
 * 拟合算法结果: 概率>=0.22
 * Model=odd-chu(-0.25), 随机场次=3170.00, 筛选比例=100%, 胜率=49%，走率=0%，败率=50% 盈利=-108.39, 盈利率=-3%
 * Model=odd-chu(-0.25), 筛选场次=648.60, 筛选比例=20%，胜率=63%，走率=0%，败率=36%，盈利=27.75, 盈利率=4%
 *
 *
 * 拟合算法结果: 概率>=0.24
 * Model=odd-chu(-0.25), 随机场次=3170.00, 筛选比例=100%, 胜率=50%，走率=0%，败率=49% 盈利=-105.64, 盈利率=-3%
 * Model=odd-chu(-0.25), 筛选场次=461.05, 筛选比例=14%，胜率=64%，走率=0%，败率=35%，盈利=28.90, 盈利率=6%
 *
 *
 * 拟合算法结果: 概率>=0.25
 * Model=odd-chu(-0.25), 随机场次=3170.00, 筛选比例=100%, 胜率=49%，走率=0%，败率=50% 盈利=-127.85, 盈利率=-4%
 * Model=odd-chu(-0.25), 筛选场次=388.65, 筛选比例=12%，胜率=65%，走率=0%，败率=34%，盈利=26.43, 盈利率=6%
 *
 *
 * 拟合算法结果: 概率>=0.26
 * Model=odd-chu(-0.25), 随机场次=3170.00, 筛选比例=100%, 胜率=50%，走率=0%，败率=49% 盈利=-84.85, 盈利率=-2%
 * Model=odd-chu(-0.25), 筛选场次=302.55, 筛选比例=9%，胜率=66%，走率=0%，败率=33%，盈利=26.06, 盈利率=8%
 *
 *
 * 拟合算法结果: 概率>=0.28
 * Model=odd-chu(-0.25), 随机场次=3170.00, 筛选比例=100%, 胜率=49%，走率=0%，败率=50% 盈利=-132.52, 盈利率=-4%
 * Model=odd-chu(-0.25), 筛选场次=228.45, 筛选比例=7%，胜率=68%，走率=0%，败率=31%，盈利=27.87, 盈利率=12%
 *
 *
 * 拟合算法结果: 概率>=0.3
 * Model=odd-chu(-0.25), 随机场次=3170.00, 筛选比例=100%, 胜率=50%，走率=0%，败率=49% 盈利=-98.59, 盈利率=-3%
 * Model=odd-chu(-0.25), 筛选场次=153.40, 筛选比例=4%，胜率=69%，走率=0%，败率=30%，盈利=23.60, 盈利率=15%
 */
public class OddStart25X extends OddStart {

  public OddStart25X() {
    super(new float[] {-0.25f});
  }

}
